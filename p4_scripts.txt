4.1 Determine how many rows you received (using the COUNT operator).

SELECT COUNT(*) AS number_of_rows 
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN categories ON categories.id =  products.category_id

---------------------------------------------------------------------
4.2 Change several INNER statements to LEFT or RIGHT. 
Determine what happens to the number of rows.
Why? Write the answer in a text file.

SELECT COUNT(*) AS number_of_rows 
FROM order_details
RIGHT JOIN products ON order_details.product_id = products.id
RIGHT JOIN suppliers ON suppliers.id = products.supplier_id
RIGHT JOIN orders ON order_details.order_id = orders.id
RIGHT JOIN customers ON customers.id = orders.customer_id
RIGHT JOIN employees ON employees.employee_id = orders.employee_id
RIGHT JOIN shippers ON shippers.id = orders.shipper_id
RIGHT JOIN categories ON categories.id =  products.category_id

*********************************************************************

SELECT COUNT(*) AS number_of_rows 
FROM order_details
LEFT JOIN products ON order_details.product_id = products.id
LEFT JOIN suppliers ON suppliers.id = products.supplier_id
LEFT JOIN orders ON order_details.order_id = orders.id
LEFT JOIN customers ON customers.id = orders.customer_id
LEFT JOIN employees ON employees.employee_id = orders.employee_id
LEFT JOIN shippers ON shippers.id = orders.shipper_id
LEFT JOIN categories ON categories.id =  products.category_id

*********************************************************************

SELECT COUNT(*) AS number_of_rows 
FROM order_details
LEFT JOIN products ON order_details.product_id = products.id
LEFT JOIN suppliers ON suppliers.id = products.supplier_id
RIGHT JOIN orders ON order_details.order_id = orders.id
RIGHT JOIN customers ON customers.id = orders.customer_id
LEFT JOIN employees ON employees.employee_id = orders.employee_id
LEFT JOIN shippers ON shippers.id = orders.shipper_id
LEFT JOIN categories ON categories.id =  products.category_id

*********************************************************************

SELECT * FROM order_details
LEFT JOIN products ON order_details.product_id = products.id
LEFT JOIN suppliers ON suppliers.id = products.supplier_id
RIGHT JOIN orders ON order_details.order_id = orders.id
RIGHT JOIN customers ON customers.id = orders.customer_id
LEFT JOIN employees ON employees.employee_id = orders.employee_id
LEFT JOIN shippers ON shippers.id = orders.shipper_id
LEFT JOIN categories ON categories.id = products.category_id
WHERE order_details.product_id IS NULL;

---------------------------------------------------------------------
4.3 Select only those rows where employee_id > 3 and â‰¤ 10.

SELECT COUNT(*) AS number_of_rows 
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN categories ON categories.id =  products.category_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10

---------------------------------------------------------------------
4.4 Group by category name, calculate the number of rows in the group,
the average quantity of the product
(the quantity of the product is in order_details.quantity)

SELECT categories.name AS categories_name,
               COUNT(*) AS number_of_rows,
               AVG(order_details.quantity) AS average_quantity
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN categories ON categories.id =  products.category_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10
GROUP BY categories.name

---------------------------------------------------------------------
4.5 Filter the rows where the average quantity is greater than 21.

SELECT categories.name AS `categories name`,
       COUNT(*) AS `number of rows`,
       AVG(order_details.quantity) AS `average quantity`
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN categories ON categories.id =  products.category_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10
GROUP BY categories.name
HAVING `average quantity` > 21

---------------------------------------------------------------------
4.6 Sort the rows in descending order of the number of rows.

SELECT categories.name AS `categories name`,
       COUNT(*) AS `number of rows`,
       AVG(order_details.quantity) AS `average quantity`
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN categories ON categories.id =  products.category_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10
GROUP BY `categories name`
HAVING `average quantity` > 21
ORDER BY `number of rows` DESC

---------------------------------------------------------------------
4.7 Display (select) the four rows with the first row omitted.

SELECT categories.name AS `categories name`,
       COUNT(*) AS `number of rows`,
       AVG(order_details.quantity) AS `average quantity`
FROM order_details
INNER JOIN products ON order_details.product_id = products.id
INNER JOIN suppliers ON suppliers.id = products.supplier_id
INNER JOIN orders ON order_details.order_id = orders.id
INNER JOIN customers ON customers.id = orders.customer_id
INNER JOIN employees ON employees.employee_id = orders.employee_id
INNER JOIN shippers ON shippers.id = orders.shipper_id
INNER JOIN categories ON categories.id =  products.category_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10
GROUP BY `categories name`
HAVING `average quantity` > 21
ORDER BY `number of rows` DESC
LIMIT 4 OFFSET 1
